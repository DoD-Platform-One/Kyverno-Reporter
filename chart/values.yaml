# -- Override the chart name used for all resources
nameOverride: ""

# -- Overwrite the fullname of all resources
fullnameOverride: "policy-reporter"

# -- Overwrite the namespace of all resources
namespaceOverride: ""

# Add plugin configuration for Trivy
# plugin contains configuration for various plugins
plugin:
  trivy:
    enabled: false
    serviceAccount:
      create: false
      automount: false
      annotations: {}

  kyverno:
    enabled: false
    serviceAccount:
      create: false
      automount: false
      annotations: {}

# monitoring contains configurations related to monitoring
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    scheme: "https"
    tlsConfig: {}
    honorLabels: false
    scrapeTimeout: ""
    interval: ""
    labels: {}
    namespaceSelector: {}
    relabelings: []
    metricRelabelings: []

  kyverno:
    serviceMonitor:
      enabled: false
      namespace: ""
      scheme: "https"
      tlsConfig: {}
      honorLabels: false
      scrapeTimeout: ""
      interval: ""
      labels: {}
      namespaceSelector: {}
      relabelings: []
      metricRelabelings: []
ui:
  enabled: false

image:
  registry: registry1.dso.mil
  repository: ironbank/opensource/kyverno/policy-reporter
  pullPolicy: IfNotPresent
  # -- (string) Image tag
  tag: 3.0.0

# -- Image pullSecrets
imagePullSecrets: []

# -- Deployment priorityClassName
priorityClassName: ""

# -- Deployment replica count
replicaCount: 1

# -- The number of revisions to keep
revisionHistoryLimit: 10

# -- Deployment strategy
updateStrategy: {}
  # rollingUpdate:
  #  maxSurge: 25%
  #  maxUnavailable: 25%
  # type: RollingUpdate

# -- Container port
port:
  name: http
  number: 8080

# -- Key/value pairs that are attached to all resources.
annotations: {}

rbac:
  # -- Create RBAC resources
  enabled: true

serviceAccount:
  # -- Create ServiceAccount
  create: true
  # -- Enable ServiceAccount automount
  automount: true
  # -- Annotations for the ServiceAccount
  annotations: {}
  # -- The ServiceAccount name
  name: ""
  # BB addition
  automountServiceAccountToken: false

service:
  # -- Create Service
  enabled: true
  # -- Service type
  type: ClusterIP
  # -- Service port
  port: 8080
  # -- Service annotations
  annotations: {}
  # -- Service labels
  labels: {}

# -- Security context for the pod
podSecurityContext:
  fsGroup: 1234

securityContext:
  runAsUser: 1234
  runAsGroup: 1234
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# -- Additional annotations to add to each pod
podAnnotations: {}

# -- Additional labels to add to each pod
podLabels: {}

# -- Resource constraints
resources: {}
  # limits:
  #   memory: 100Mi
  #   cpu: 10m
  # requests:
  #   memory: 75Mi
  #   cpu: 5m

networkPolicy:
  # -- Create NetworkPolicy
  enabled: false
  # -- Egress rule to allowe Kubernetes API Server access
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 6443
  ingress: []

ingress:
  # -- Create Ingress
  # This ingress exposes the policy-reporter core app.
  enabled: false
  # -- Ingress className
  className: ""
  # -- Labels for the Ingress
  labels: {}
  # -- Annotations for the Ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Ingress host list
  hosts:
  #  - host: chart-example.local
  #    paths: []
  # -- Ingress tls list
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

logging:
  # -- Enables server access logging
  server: false
  # -- Log encoding
  # possible encodings are console and json
  encoding: console
  # -- Log level
  # default info
  logLevel: 0

rest:
  # -- Enables the REST API
  enabled: false

metrics:
  # -- Enables Prometheus Metrics
  enabled: false
  # -- Metric Mode allowes to customize labels
  # Allowed values: detailed, simple, custom
  mode: detailed
  # -- List of used labels in custom mode
  # Supported fields are: ["namespace", "rule", "policy", "report" // PolicyReport name, "kind" // resource kind, "name" // resource name, "status", "severity", "category", "source"]
  customLabels: []
  # -- Filter results to reduce cardinality
  filter: {}
#    sources:
#      exclude: ["Trivy CIS Kube Bench"]
#    status:
#      exclude: ["pass", "skip"]

profiling:
  # -- Enable profiling with pprof
  enabled: false

# -- Amount of queue workers for PolicyReport resource processing
worker: 5

# -- Filter PolicyReport resources to process
reportFilter: {}
  # # -- Filter reports based on an namespace allow- or disallow list, wildcards are supported
  # namespaces:
  #  include: []
  #  exclude: []
  # # -- Disable the processing of ClusterPolicyReports
  # disableClusterReports: false

# -- Customize source specific logic like result ID generation
sourceConfig: []
# - selector:
#     source: kyverno
#   customId:
#     enabled: true
#     fields: ["resource", "policy", "rule", "category", "result", "message"]

# Source based PolicyReport filter
sourceFilters:
  - selector:
      # -- select PolicyReport by source
      source: kyverno
    # -- Filter out PolicyReports of controlled Pods and Jobs, only works for PolicyReport with scope resource
    uncontrolledOnly: true
    # -- Filter out ClusterPolicyReports
    disableClusterReports: false
    # -- Filter out PolicyReports based on the scope resource kind
    kinds:
      exclude: [ReplicaSet]

global:
  # -- additional labels added on each resource
  labels: {}

# basicAuth for APIs and metrics
basicAuth:
  # -- HTTP BasicAuth username
  username: ""
  # -- HTTP BasicAuth password
  password: ""
  # -- (optional) Secret reference to get username and/or password from
  secretRef: ""

emailReports:
  # -- (optional) - Displayed in the email report if configured
  clusterName: ""
  # -- Title prefix in the email subject
  titlePrefix: "Report"
  # -- Resource constraints for the created CronJobs
  resources: {}
  smtp:
    # -- (optional) Secret reference to provide the complete or partial SMTP configuration
    secret: ""
    # -- SMTP Server Host
    host: ""
    # -- SMTP Server Port
    port: 465
    # -- SMTP Username
    username: ""
    # -- SMTP Password
    password: ""
    # -- Displayed from email address
    from: ""
    # -- SMTP Encryption
    # Default is none, supports ssl/tls and starttls
    encryption: ""
    # -- Skip SMTP TLS verification
    skipTLS: false
    # -- SMTP Server Certificate file path
    certificate: ""

  summary:
    # -- Enable Summary E-Mail reports
    enabled: false
    # -- CronJob schedule
    schedule: "0 8 * * *"
    # -- CronJob activeDeadlineSeconds
    activeDeadlineSeconds: 300
    # -- CronJob backoffLimit
    backoffLimit: 3
    # -- CronJob ttlSecondsAfterFinished
    ttlSecondsAfterFinished: 0
    # -- CronJob restartPolicy
    restartPolicy: Never
    # -- List of receiver email addresses
    to: []
    # -- (optional) Report filter
    filter: {}
    #  # remove ClusterPolicyResults from Reports
    #  disableClusterReports: false
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    # -- (optional) Channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    channels: []
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']

  violations:
    # -- Enable Violation Summary E-Mail reports
    enabled: false
    # -- CronJob schedule
    schedule: "0 8 * * *"
    # -- CronJob activeDeadlineSeconds
    activeDeadlineSeconds: 300
    # -- CronJob backoffLimit
    backoffLimit: 3
    # -- CronJob ttlSecondsAfterFinished
    ttlSecondsAfterFinished: 0
    # -- CronJob restartPolicy
    restartPolicy: Never
    # -- List of receiver email addresses
    to: []
    # -- (optional) Report filter
    filter: {}
    #  disableClusterReports: false # remove ClusterPolicyResults from Reports
    #  namespaces:
    #    include: []
    #    exclude: []
    #  sources:
    #    include: []
    #    exclude: []
    # -- (optional) Channels can be used to to send only a subset of namespaces / sources to dedicated email addresses
    channels: []
    #  - to: ['team-a@company.org']
    #    filter:
    #      disableClusterReports: true
    #      namespaces:
    #        include: ['team-a-*']
    #      sources:
    #        include: ['Kyverno']

existingTargetConfig:
  # -- Use an already existing configuration
  enabled: false
  # -- Name of the secret with the config
  name: ""
  # -- SubPath within the secret (defaults to config.yaml)
  subPath: ""

target:
  loki:
    # -- Host Address
    host: ""
    # -- Loki API, defaults to "/loki/api/v1/push"
    path: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Additional HTTP Headers
    headers: {}
    # -- HTTP BasicAuth username
    username: ""
    # -- HTTP BasicAuth password
    password: ""
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
#      namespaces:
#        include: ["develop"]
#      priorities:
#        exclude: ["debug", "info", "error"]
#      labels:
#        include: ["app", "owner:team-a", "monitoring:*"]
    # -- List of channels to route results to different configurations
    channels: []
#    - host: "http://loki.loki-stack:3100"
#      sources: []
#      customLabels: {}
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]

  elasticsearch:
    # -- Host address
    host: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Elasticsearch index (default: policy-reporter)
    index: "policy-reporter"
    # -- Elasticsearch index rotation and index suffix
    # Possible values: daily, monthly, annually, none (default: daily)
    rotation: "daily"
    # -- Enables Elasticsearch typless API
    # https://www.elastic.co/blog/moving-from-types-to-typeless-apis-in-elasticsearch-7-0 keeping as false for retrocompatibility.
    typelessApi: false
    # -- HTTP BasicAuth username
    username: ""
    # -- HTTP BasicAuth password
    password: ""
    # -- Elasticsearch API Key for api key authentication
    apiKey: ""
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  slack:
    # -- Webhook Address
    webhook: ""
    # -- Slack Channel
    channel: ""
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []
#    - webhook: "https://slack.webhook1"
#      channel: ""
#      filter:
#        namespaces:
#          include: ["develop"]
#        priorities:
#          exclude: ["debug", "info", "error"]
#        policies:
#          include: ["require-run-as-nonroot"]
#        reportLabels:
# .         include: ["app", "owner:team-b"]
#    - webhook: "https://slack.webhook2"
#      minimumSeverity: "warning"
#      filter:
#        namespaces:
#          include: ["team-a-*"]

  discord:
    # -- Webhook Address
    webhook: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  teams:
    # -- Webhook Address
    webhook: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  webhook:
    # -- Webhook Address
    webhook: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  telegram:
    # -- Telegram bot token
    token: ""
    # -- Telegram chat id
    chatId: ""
    # -- (optional) Telegram proxy host
    host: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  googleChat:
    # -- Webhook Address
    webhook: ""
    # -- Server Certificate file path
    # Can be added under extraVolumes
    certificate: ""
    # -- Skip TLS verification
    skipTLS: false
    # -- Additional HTTP Headers
    headers: {}
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  # Authentication via PodIdentity or WebIdentity are also supported
  s3:
    # -- (optional) S3 Access key
    accessKeyId: ""
    # -- (optional) S3 SecretAccess key
    secretAccessKey: ""
    # -- (optional) S3 Storage region
    region: ""
    # -- (optional) S3 Storage endpoint
    endpoint: ""
    # -- (required) S3 Storage bucket name
    bucket: ""
    # -- S3 Storage to use an S3 Bucket Key for object encryption with SSE-KMS
    bucketKeyEnabled: false
    # -- S3 Storage KMS Key ID for object encryption with SSE-KMS
    kmsKeyId: ""
    # -- S3 Storage server-side encryption algorithm used when storing this object in Amazon S3, AES256, aws:kms
    serverSideEncryption: ""
    # -- S3 Storage, force path style configuration
    pathStyle: false
    # -- Used prefix, keys will have format: s3://$bucket/$prefix/YYYY-MM-DD/YYYY-MM-DDTHH:mm:ss.s+01:00.json
    prefix: ""
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  # Authentication via PodIdentity or WebIdentity are also supported
  kinesis:
    # -- (optional) Access key
    accessKeyId: ""
    # -- (optional) SecretAccess key
    secretAccessKey: ""
    # -- (optional) Region
    region: ""
    # -- (optional) Endpoint
    endpoint: ""
    # -- (required) StreamName
    streamName: ""
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  # Authentication via PodIdentity or WebIdentity are also supported
  securityHub:
    # -- (optional) Access key
    accessKeyId: ""
    # -- (optional) SecretAccess key
    secretAccessKey: ""
    # -- (optional) Region
    region: ""
    # -- (optional) Endpoint
    endpoint: ""
    # -- (required) AccountId
    accountId: ""
    # -- (optional) Used product name, defaults to "Polilcy Reporter"
    productName: ""
    # -- (optional) Used company name, defaults to "Kyverno"
    companyName: ""
    # -- Enable cleanup listener for SecurityHub
    synchronize: true
    # -- Delay between AWS GetFindings API calls, to avoid hitting the API RequestLimit
    delayInSeconds: 2
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

  # Authentication via PodIdentity is also supported
  gcs:
    # -- (optional) GCS (Google Cloud Storage) Service Accout Credentials
    credentials: ""
    # -- (required) GCS Bucket
    bucket: ""
    # -- Read configuration from an already existing Secret
    secretRef: ""
    # -- Mounted secret path by Secrets Controller, secret should be in json format
    mountedSecret: ""
    # -- Minimum severity: "" < info < low < medium < high < critical
    minimumSeverity: ""
    # -- List of sources which should send
    sources: []
    # -- Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: true
    # -- Added as additional labels
    customFields: {}
    # -- Filter Results which should send to this target
    # Wildcars for namespaces and policies are supported, you can either define exclude or include values
    # Filters are available for all targets except the UI
    filter: {}
    # -- List of channels to route results to different configurations
    channels: []

# LeaderElection configuration for HA mode
# will be enabled when replicaCount > 1
leaderElection:
  releaseOnCancel: true
  leaseDuration: 15
  renewDeadline: 10
  retryPeriod: 2

redis:
  # -- Enables Redis as external result cache, uses in memory cache by default
  enabled: false
  # -- Redis host
  address: ""
  # -- Redis database
  database: 0
  # -- Redis key prefix
  prefix: "policy-reporter"
  # -- (optional) Username
  username: ""
  # -- (optional) Password
  password: ""

database:
  # -- Use an external Database, supported: mysql, postgres, mariadb
  type: ""
  # -- Database
  database: ""
  # -- Username
  username: ""
  # -- Password
  password: ""
  # -- Host Address
  host: ""
  # -- Enables SSL
  enableSSL: false
  # -- Instead of configure the individual values you can also provide an DSN string
  # example postgres: postgres://postgres:password@localhost:5432/postgres?sslmode=disable
  # example mysql: root:password@tcp(localhost:3306)/test?tls=false
  dsn: ""
  # -- Read configuration from an existing Secret
  # supported fields: username, password, host, dsn, database
  secretRef: ""
  # Read configuration from a mounted Secret, required the information in JSON format
  # supported fields: username, password, host, dsn, database
  mountedSecret: ""

# enabled if replicaCount > 1
podDisruptionBudget:
  # -- Configures the minimum available pods for policy-reporter disruptions.
  # Cannot be used if `maxUnavailable` is set.
  minAvailable: 1
  # -- Configures the maximum unavailable pods for policy-reporter disruptions.
  # Cannot be used if `minAvailable` is set.
  maxUnavailable:

# -- Node labels for pod assignment
# ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# -- Tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# -- Anti-affinity to disallow deploying client and master nodes on the same worker node
affinity: {}

# -- Topology Spread Constraints to better spread pods
topologySpreadConstraints: []

# -- Deployment livenessProbe for policy-reporter
livenessProbe:
  httpGet:
    path: /ready
    port: http

# -- Deployment readinessProbe for policy-reporter
readinessProbe:
  httpGet:
    path: /healthz
    port: http

# If set the volume for sqlite is freely configurable below "- name: sqlite". If no value is set an emptyDir is used.
sqliteVolume: {}
  # emptyDir:
  #   sizeLimit: 10Mi

# -- Allow additional env variables to be added
envVars: []

# -- Allow custom configuration of the /tmp volume
tmpVolume: {}
  # emptyDir:
  #   sizeLimit: 10Mi

# Big Bang additions
networkPolicies:
  enabled: false
  controlPlaneCidr: 0.0.0.0/0
  additionalPolicies: []

extraVolumes:
  volumeMounts: []

openshift: false

istio:
  enabled: false
  mtls:
    mode: STRICT
  hardened:
    enabled: false
    outboundTrafficPolicyMode: "REGISTRY_ONLY"
    customServiceEntries: []
      # - name: "allow-google"
      #   enabled: true
      #   spec:
      #     hosts:
      #       - *.google.com
      #     location: MESH_EXTERNAL
      #     ports:
      #       - number: 443
      #         protocol: TLS
      #         name: https
      #     resolution: DNS

bbtests:
  enabled: false
  cypress:
    artifacts: true
    envs:
      cypress_grafana_url: http://grafana.monitoring.svc.cluster.local
      cypress_prometheus_url: http://monitoring-kube-prometheus-prometheus.monitoring.svc.cluster.local:9090
      cypress_grafana_user: "admin"
      cypress_grafana_pass: "prom-operator"
      cypress_reporter_ns: kyverno-reporter
  scripts:
    image: registry1.dso.mil/ironbank/opensource/kubernetes/kubectl:v1.30.6
    envs:
      KYVERNO_REPORTER_URL: 'http://policy-reporter.kyverno-reporter.svc:8080'

  volumes: []
